buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'org.owasp:dependency-check-gradle:6.2.2'
	}
}

plugins {
	id 'org.springframework.boot' version  "${springBootVersion}"
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'info.solidsoft.pitest' version '1.7.0'
	id 'jacoco'
	id "org.sonarqube" version "3.3"
}


allprojects {
    repositories {
        mavenCentral() 
    }
	apply plugin: 'java'
	apply plugin: 'jacoco'
	apply plugin: 'org.owasp.dependencycheck'

	group = 'com.ceiba'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = '11.0.13'


	project.ext.apachecommons = [
			"commons-io:commons-io:2.6",
			"org.apache.commons:commons-lang3:3.7"
	]
	
	tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
	tasks.withType(Test) { systemProperty "file.encoding", "UTF-8" }

	project.ext.mockitocore = ['org.mockito:mockito-core:3.11.2']
	project.ext.mockitoinline = ['org.mockito:mockito-inline:3.11.2']
	project.ext.mockitojupiter = ['org.mockito:mockito-junit-jupiter:3.11.2']
	project.ext.lombok = ["org.projectlombok:lombok:1.18.20"]

	project.ext.springboottest = ["org.springframework.boot:spring-boot-starter-test:${springBootVersion}"]
	project.ext.springbootweb = ["org.springframework.boot:spring-boot-starter-web:${springBootVersion}"]
	project.ext.springdevtools = ["org.springframework.boot:spring-boot-devtools:${springBootVersion}"]
	project.ext.springbootundertow = ["org.springframework.boot:spring-boot-starter-undertow:${springBootVersion}"]
	project.ext.springbootjasypt = ['com.github.ulisesbocchio:jasypt-spring-boot-starter:2.1.1']

	// Se excluye JUnit 4
	configurations {
		runtime.exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	
	configurations.all {
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			if (details.requested.group == 'org.apache.logging.log4j') {
				details.useVersion '2.16.0'
			}
		}
	}

	project.ext.springtxt = [
							  	"org.springframework:spring-tx:${springVersion}",
							  	"org.springframework:spring-context:${springVersion}"
							]

	project.ext.swagger = [
			"io.springfox:springfox-swagger-ui:2.9.2",
			"io.springfox:springfox-swagger2:2.9.2"
	]

	project.ext.db = [""]

	project.ext.springbootjdbc = ["org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}"]
	project.ext.flyway = ["org.flywaydb:flyway-core:5.2.1"]
	project.ext.flywaytest = ["org.flywaydb.flyway-test-extensions:flyway-spring-test:5.2.1"]

	project.ext.h2 = ["com.h2database:h2"]
	dependencies{
		implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.7'
	}



	jacocoTestReport {
		reports {
			xml.enabled true
			csv.enabled false
		}
	}
}


dependencies {

	configurations {
		runtime.exclude module: 'spring-boot-starter-tomcat'
		compile.exclude module: 'spring-boot-starter-tomcat'
	}

	implementation project.ext.springbootweb
	runtimeOnly project.ext.springdevtools

	implementation project.ext.springbootundertow
	implementation project.ext.flyway

	testImplementation project.ext.mockitocore
	testImplementation project.ext.mockitoinline
	testImplementation project.ext.mockitojupiter
	testImplementation project.ext.springboottest
	implementation project.ext.swagger

	implementation project.ext.apachecommons
	implementation project.ext.springbootjdbc

	runtimeOnly 'com.h2database:h2'
//	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation group: 'org.springframework.data', name: 'spring-data-commons', version: '2.6.4'
	implementation group: 'org.springframework', name: 'spring-web', version: '5.3.19'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.6.6'
	implementation group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'


	implementation project(':infraestructura')
	implementation project(':dominio')

}

repositories {
	mavenCentral()
}

bootJar {
	mainClassName = 'com.ceiba.Application'
    baseName = ''
    version =  version
}

jacoco {
	toolVersion = '0.8.7'
	reportsDir = file("$buildDir/reports")
}

task jacocoMergedReport(type: JacocoReport) {
	dependsOn = allprojects.jacocoTestReport
	additionalSourceDirs.setFrom files(allprojects.sourceSets.main.allSource.srcDirs)
	sourceDirectories.setFrom files(allprojects.sourceSets.main.allSource.srcDirs)
	classDirectories.setFrom files(allprojects.sourceSets.main.output)
	executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
	reports {
		xml.enabled true
		xml.destination = file("${buildDir}/jacoco/report.xml")
		csv.enabled false
		html.enabled true
		html.destination = file("${buildDir}/jacoco")
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/actuator/*',
					'**/configuracion/*',
					'**/jdbc/*',
					'**/filtro/*',
					'**/core/*',
					'**/ComandoRespuesta',
					'**/Application'

			])
		}))
	}
}


test {
	useJUnitPlatform()
	finalizedBy jacocoMergedReport
}




